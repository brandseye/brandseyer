% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/count.R
\name{account_count}
\alias{account_count}
\alias{account_count.brandseye.account}
\alias{account_count.character}
\title{Count mentions}
\usage{
account_count(account, ...)

\method{account_count}{character}(accounts, filter = NULL, groupby = NULL,
  include = NULL, authentication = pkg.env$defaultAuthentication,
  showProgress = length(accounts) > 10, .process = TRUE)

\method{account_count}{brandseye.account}(account, filter = NULL,
  groupby = NULL, include = NULL)
}
\arguments{
\item{account}{An account to be queried.}

\item{accounts}{A vector of account codes. If this is a single account code, this function
will return a data frame of results just from that account. If it contains multiple accounts,
this will return a data frame containing all the results across accounts, and a column indicating
the account that the particular result is from.}

\item{filter}{A filter string describing the mentions that should be counted by this query
Count aggregate mention information from your BrandsEye account}

\item{groupby}{A vector of items that should be grouped by. For example,
\code{c("published", "language")}}

\item{include}{A vector of items naming values that should be included.
For example, \code{c("ots", "ave")}}

\item{showProgress}{Set to true if you would like a progress bar to be shown when querying multiple
       accounts.}

\item{.process}{Indicates whether the types should be cleaned. For instance, date values transformed
from strings to POSIXct objects, NA values properly handled, etc.}
}
\description{
\code{account_count} is used to count mentions in a BrandsEye account matching
matching a particular filter, and to produce aggreagate data related to them.
It's possible to group mentions, order the
results, and to include various other bits of useful information. It's also
possible to perform count operations across multiple accounts.
}
\details{
Filters are described in the api documentation \url{https://api.brandseye.com/docs}

It's possible to parallelise this call. This is only useful if you're querying multiple accounts:
there will be no benefit when querying only a single account. Any parallel backend for
the \code{\link{foreach}} package can be used to enable parallel functioning. For example, on
a Linux or OX X based system, the following will work well:

\verb{
 library(doMC)
 registerDoMC(8)
 account_count(list_account_codes(), "published inthelast day")
}
}
\section{Methods (by class)}{
\itemize{
\item \code{character}: 

\item \code{brandseye.account}: 
}}
\section{Grouping}{


The \code{account_count} function will by default return only a count of the mentions
matching the given filter. If you would like more information, you should
group by particular values. The following (possibly incomplete) list
of fields can be grouped by:

action, alexaRank, assignee, author, authorName, brand, city, country,
credibility, extract, feed, gender, language, link, linked, media, pageRank,
phrase, phraseMatches, pickedUp, process, published, region, relevancy,
relevancyVerified, sentiment, sentimentVerified, tag, title, updated, uri,
replycount, resharecount, responsetime
}

\section{Including extra data}{


Grouping is the first step to include extra data. However, some data
cannot be grouped by, and are instead extra information added on to
each of the returned buckets. This might include information as simple
as a new format for the country code (\code{countryISO3} being an example),
or aggregate data for the group (\code{AVE} and \code{OTS} being examples).

An incomplete list of data that can be included are:

ave, ots, percentages, engagement, sentiment-reach, sentiment-count, countryISO3,
latlon, scale, yaw, pitch, roll
}

\section{API documentation}{


The canonical documentation for the filter language, and what fields
may be grouped and included, is the BrandsEye API documentation
\url{https://api.brandseye.com/docs}.
}
\examples{
\dontrun{
account_count("QUIR01BA", "published inthelast month") # Uses default authentication,
                                                 # if that has been set up.
account_count("QUIR01BA", "published inthelast month",
        authentication = authentication(key = "<my key>"))
# Return results for multiple accounts
account_count(c("QUIR01BA", "BEAD33AA"), "published inthelast month")

# Return results for all accounts
account_count(list_account_codes(), "published inthelast month")

# Return results grouped by publication date
account_count("QUIR01BA", "published inthelast month", groupby = "published)

# Include Ad Value Equivalent (AVE) and Opportunity to See
account_count("QUIR01BA", "published inthelast month", groupby = "published,
        include = c("ave", "ots"))
}
\dontrun{
# Not using global authentication, but authenticating directly in the call
# itself.
ac <- account("QUIR01BA", key="<my key>")

# A single number counting the mentions published in the last week.
account_count(ac, "published inthelast week")

# The number of relevant mentions published in the last month
account_count(ac, "published inthelast month and relevancy isnt irrelevant")

# As above, but grouped by publication day
account_count(ac, "published inthelast month and relevancy isnt irrelevant",
        groupby="published")
}
}
\author{
Rudy Neeser
}
\seealso{
\code{\link{account}} for information on querying account information, including
     seeing the brands and phrases associated with an account.

\code{\link{account_mentions}} for querying raw mention data.
}

